[{"content":"As Visual Studio Code is one of the most used code editor, beginner in C and C++ programming have difficulty setting up this editor for C and C++ programming\nHere I would like to help by setting up VSCode with Clangd\nClangd is an LSP that helps coding in C or C++ a easier\nWe would be setting up our C project for writing a simple window using the GTK libraries\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // main.c #include \u0026lt;gtk/gtk.h\u0026gt; static void activate(GtkApplication *app, gpointer user_data) { GtkWidget *window; GtkWidget *label; window = gtk_application_window_new(app); label = gtk_label_new(\u0026#34;Hello GNOME!\u0026#34;); gtk_container_add(GTK_CONTAINER(window), label); gtk_window_set_title(GTK_WINDOW(window), \u0026#34;Welcome to GNOME\u0026#34;); gtk_window_set_default_size(GTK_WINDOW(window), 400, 200); gtk_widget_show_all(window); } int main(int argc, char **argv) { GtkApplication *app; int status; app = gtk_application_new(NULL, G_APPLICATION_FLAGS_NONE); g_signal_connect(app, \u0026#34;activate\u0026#34;, G_CALLBACK(activate), NULL); status = g_application_run(G_APPLICATION(app), argc, argv); g_object_unref(app); return status; } This code is from the mesonbuild #site which is the build system we would be using for the project\nWhat is an LSP? An LSP(Language Server Protocol) is a program that looks through your code for syntax errors and in some cases linting errors depending on the linter provided\nClangd Setup on VSCode First we would need the Clangd extension as well as the LSP itself You can download the extension from #here The extension provides its own Clangd LSP but in case of issues with that we would like to download and setup the clangd package from the official site for both Windows and Linux\nLinux Setup We can download and install the clangd LSP using the available package manager and installer like apt for Debian/Ubuntu, dnf or yum for Red Hat distributions and pacman or yay for Arch\nI use Arch so the command I am more familar with is yay 1 yay -S clangd-opt # This downloads and builds the latest clangd available from the Arch User Repository Then inside our VSCode settings we set path to where our clangd would be located We try to find the path to clangd using whereis clangd or which clangd Building the project Clangd would work for most cases however when involving non-standard libraries like our GTK library, we would start to see a lot of errors First we need to know if the library\u0026rsquo;s files are available, we can download them and include them to our project but to make this short we would just use pkg-config and grep command to find the necessary GTK+ library for our little demo which I have installed in my system Then we would include this as a dependency to our project through our build tool such as make, CMake or Meson, we would be using meson which is simpler and easy to use.\nSo we install meson using our package manager\n1 sudo pacman -S meson We setup our meson.build with the project, this lays out the project for compilation\nWe write the following code for our demo\u0026rsquo;s meson.build\n1 2 3 project(\u0026#39;demo\u0026#39;, \u0026#39;c\u0026#39;) gtk = dependency(\u0026#39;gtk+-3.0\u0026#39;) executable(\u0026#39;demo\u0026#39; \u0026#39;main.c\u0026#39;, dependencies: [gtk]) What our meson.build file will tell the build system is that our project name is demo and it uses the C programming language we have included the gtk+-3.0 as a dependency and we would build an executable with the name demo from our main.c file\nThis generates the necessary files and parameters for our compilation\nA json file with that name compile_commands.json is generated and allows us to quickly use our build system to compile our code, this is also needed by clangd to know our dependency files\nIn our project directory, we setup our build folder using meson but we would need our compile_commands.json to be within the root of the project for clangd to work properly with so we download bear for that purpose and use it along meson to get our compile_commands.json\n1 2 sudo pacman -S bear bear -- meson setup build With that done our compile_commands.json would contain the following code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [ { \u0026#34;arguments\u0026#34;: [ \u0026#34;/usr/bin/cc\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;-D_FILE_OFFSET_BITS=64\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;sanitycheckc.exe\u0026#34;, \u0026#34;sanitycheckc.c\u0026#34; ], \u0026#34;directory\u0026#34;: \u0026#34;/home/android-jester/Documents/learning-concepts/c/demo/build/meson-private\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;/home/android-jester/Documents/learning-concepts/c/demo/build/meson-private/sanitycheckc.c\u0026#34;, \u0026#34;output\u0026#34;: \u0026#34;/home/android-jester/Documents/learning-concepts/c/demo/build/meson-private/sanitycheckc.exe\u0026#34; } ] This however doesn\u0026rsquo;t contain the include files for that we need to compile our project using meson\n1 bear -- meson compile -C build Funny to say there is some depreciated code in the source file but it will work out\nWith that done our compile_commands.json look like this\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 [ { \u0026#34;arguments\u0026#34;: [ \u0026#34;/usr/bin/cc\u0026#34;, \u0026#34;-Idemo.p\u0026#34;, \u0026#34;-I.\u0026#34;, \u0026#34;-I..\u0026#34;, \u0026#34;-I/usr/include/gtk-3.0\u0026#34;, \u0026#34;-I/usr/include/pango-1.0\u0026#34;, \u0026#34;-I/usr/include/glib-2.0\u0026#34;, \u0026#34;-I/usr/lib/glib-2.0/include\u0026#34;, \u0026#34;-I/usr/include/sysprof-4\u0026#34;, \u0026#34;-I/usr/include/harfbuzz\u0026#34;, \u0026#34;-I/usr/include/freetype2\u0026#34;, \u0026#34;-I/usr/include/libpng16\u0026#34;, \u0026#34;-I/usr/include/libmount\u0026#34;, \u0026#34;-I/usr/include/blkid\u0026#34;, \u0026#34;-I/usr/include/fribidi\u0026#34;, \u0026#34;-I/usr/include/cairo\u0026#34;, \u0026#34;-I/usr/include/pixman-1\u0026#34;, \u0026#34;-I/usr/include/gdk-pixbuf-2.0\u0026#34;, \u0026#34;-I/usr/include/gio-unix-2.0\u0026#34;, \u0026#34;-I/usr/include/cloudproviders\u0026#34;, \u0026#34;-I/usr/include/atk-1.0\u0026#34;, \u0026#34;-I/usr/include/at-spi2-atk/2.0\u0026#34;, \u0026#34;-I/usr/include/at-spi-2.0\u0026#34;, \u0026#34;-I/usr/include/dbus-1.0\u0026#34;, \u0026#34;-I/usr/lib/dbus-1.0/include\u0026#34;, \u0026#34;-fdiagnostics-color=always\u0026#34;, \u0026#34;-D_FILE_OFFSET_BITS=64\u0026#34;, \u0026#34;-Wall\u0026#34;, \u0026#34;-Winvalid-pch\u0026#34;, \u0026#34;-O0\u0026#34;, \u0026#34;-g\u0026#34;, \u0026#34;-pthread\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;-o\u0026#34;, \u0026#34;demo.p/main.c.o\u0026#34;, \u0026#34;../main.c\u0026#34; ], \u0026#34;directory\u0026#34;: \u0026#34;/home/android-jester/Documents/learning-concepts/c/demo/build\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;/home/android-jester/Documents/learning-concepts/c/demo/main.c\u0026#34;, \u0026#34;output\u0026#34;: \u0026#34;/home/android-jester/Documents/learning-concepts/c/demo/build/demo.p/main.c.o\u0026#34; } ] This shows how my code with compile using the gcc compiler installed on my system, I can change anything in this file manually but more importantly we need to see if the clangd extension has recognized our header files\nAs we can see the error lines are gone and we can run our executable in the build folder\n1 ./build/demo Windows Setup MSYS2 MINGW On Windows, we would use MSYS2 MINGW to setup our environment by installing the GNU GCC compiler and Meson build tool\nWe can download MSYS2 installer from here\nAfter going through the installation process, we would have the mingw64 msys2 terminal available.\nClangd Installation Afterward install clangd from the clang-tools-extra inside bash from mingw64\n1 pacman -S mingw-w64-x86_64-clang-tools-extra The tools are a lot bigger on the Windows side because it also contains the needed gcc compiler and libraries, Clang compiler and libraries and other tools\nWith that we can find the clangd using whereis clangd VSCode setup In VSCode, after installing the clangd extension, we can either use the bundled clangd downloaded from the extension or we can link it to our clangd installed from msys2 mingw64\nIn VSCode, we can add the following in our user\u0026rsquo;s settings.json which contains all our user settings.\n1 2 3 4 5 6 7 8 9 \u0026#34;terminal.integrated.profiles.windows\u0026#34;: { \u0026#34;MSYS2\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;cmd.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/c\u0026#34;, \u0026#34;C:\\\\msys64\\\\msys2_shell.cmd -defterm -here -no-start -mingw64 -use-full-path\u0026#34; ] }, ... Conan and Code Before we start to code we would need to easily download and use some external libraries Using the guide from Conan, C++ Open Source Package Manager, We can setup conan for msys2 mingw-w64\nWith conan executable setup we need to create our conanfile.txt for our project\n1 2 3 4 5 6 [requires] zlib/1.2.13 [generators] PkgConfigDeps MesonToolchain We are simply importing zlib from the conan package center where we can download the needed libraries and generate a native file for our meson\nFor Windows GTK doesn\u0026rsquo;t work as expected thus we would go for a command line compression tool zlib so inside our meson.build file we include the following\n1 2 3 project(\u0026#39;demo\u0026#39;, \u0026#39;c\u0026#39;) zlib = dependency(\u0026#39;zlib\u0026#39;) executable(\u0026#39;demo\u0026#39;, \u0026#39;main.c\u0026#39;, dependencies: [zlib]) And in our project contains our code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 //main.c #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;string.h\u0026gt; #include \u0026lt;zlib.h\u0026gt; int main(void) { char buffer_in [256] = {\u0026#34;A simple string we want to compress, don\u0026#39;t worry about the detail just let the library do its thing we will also try to print out the version of ZLIB to show that it works\u0026#34;}; char buffer_out [256] = {0}; // Just deflation or compression z_stream defstream; defstream.zalloc = Z_NULL; defstream.zfree = Z_NULL; defstream.opaque = Z_NULL; defstream.avail_in = (uInt) strlen(buffer_in); defstream.next_in = (Bytef *) buffer_in; defstream.avail_out = (uInt) sizeof(buffer_out); defstream.next_out = (Bytef *) buffer_out; deflateInit(\u0026amp;defstream, Z_BEST_COMPRESSION); deflate(\u0026amp;defstream, Z_FINISH); deflateEnd(\u0026amp;defstream); // Printing out the compression details printf(\u0026#34;Uncompressed size is: %lu\\n\u0026#34;, strlen(buffer_in)); printf(\u0026#34;Compressed size is: %lu\\n\u0026#34;, strlen(buffer_out)); printf(\u0026#34;ZLIB VERSION: %s\\n\u0026#34;, zlibVersion()); return EXIT_SUCCESS; } Build and compile Bear is the program we used in linux to copy our compile_commands.json from our build folder however I cannot easily find a prebuilt executable for Windows thus we would manually copy the compile_commands.json from the build folder\nFirst we setup the build by getting our dependencies\n1 conan install . --output-folder=build --build=missing This generates a build folder which contains the files necessary to build our project using meson\nWe use meson and the native meson file generated from the build folder conan generated to create our own build folder\n1 meson setup \u0026lt;build-folder-name\u0026gt; --native-file build/conan_meson_native.ini However you might approach an error like this\nWe can fix that error by simply changing the compiler used to use our gcc compiler included in out clang-tools-extra in our build/conan_meson_native.ini\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 [properties] [constants] preprocessor_definitions = [] # Constants to be overridden by conan_meson_deps_flags.ini (if exists) deps_c_args = [] deps_c_link_args = [] deps_cpp_args = [] deps_cpp_link_args = [] [project options] wrap_mode = \u0026#39;nofallback\u0026#39; bindir = \u0026#39;bin\u0026#39; sbindir = \u0026#39;bin\u0026#39; libexecdir = \u0026#39;bin\u0026#39; includedir = \u0026#39;include\u0026#39; libdir = \u0026#39;lib\u0026#39; [binaries] # c = \u0026#39;cl\u0026#39; # cpp = \u0026#39;cl\u0026#39; # The compiler binary names c = \u0026#39;gcc\u0026#39; cpp = \u0026#39;gcc\u0026#39; [built-in options] buildtype = \u0026#39;release\u0026#39; b_vscrt = \u0026#39;md\u0026#39; b_ndebug = \u0026#39;true\u0026#39; cpp_std = \u0026#39;vc++14\u0026#39; backend = \u0026#39;ninja\u0026#39; pkg_config_path = \u0026#39;C:\\Users\\Android-Jester\\Documents\\learning-concepts\\C\\demo\\build\u0026#39; # C/C++ arguments c_args = [] + preprocessor_definitions + deps_c_args c_link_args = [] + deps_c_link_args cpp_args = [] + preprocessor_definitions + deps_cpp_args cpp_link_args = [] + deps_cpp_link_args Finally our build would be completed The compile_commands.json file which clangd needs is inside the builddir so we can easily copy it to the root directory, it might contains the following\n1 2 3 4 5 6 7 8 [ { \u0026#34;directory\u0026#34;: \u0026#34;/c/Users/Android-Jester/Documents/learning-concepts/C/demo/builddir\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;\\\u0026#34;gcc\\\u0026#34; \\\u0026#34;-Idemo.exe.p\\\u0026#34; \\\u0026#34;-I.\\\u0026#34; \\\u0026#34;-I..\\\u0026#34; \\\u0026#34;-fdiagnostics-color=always\\\u0026#34; \\\u0026#34;-DNDEBUG\\\u0026#34; \\\u0026#34;-D_FILE_OFFSET_BITS=64\\\u0026#34; \\\u0026#34;-Wall\\\u0026#34; \\\u0026#34;-Winvalid-pch\\\u0026#34; \\\u0026#34;-O3\\\u0026#34; -MD -MQ demo.exe.p/main.c.obj -MF \\\u0026#34;demo.exe.p\\\\main.c.obj.d\\\u0026#34; -o demo.exe.p/main.c.obj \\\u0026#34;-c\\\u0026#34; ../main.c\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;../main.c\u0026#34;, \u0026#34;output\u0026#34;: \u0026#34;demo.exe.p/main.c.obj\u0026#34; } ] This includes all the library files needed thus we can compile our code and run it to see the result\n1 meson compile -C \u0026lt;build-folder-name\u0026gt; And VSCode can recognize our zlib header file I hope this was a short and informative guide as this is my first post, please if there are any issues or suggestions for improvements with the process, please let me know in the comments\n","date":"2023-09-07T22:20:32Z","image":"https://www.gravatar.com/avatar/24a44e8bc08cd0c6e2fd43378eeb25b2?s=192\u0026d=identicon\u0026r=PG\u0026f=y\u0026so-version=2","permalink":"https://example.org/p/vscode-setup-guide-for-c-and-c-/","title":"VSCode Setup Guide for C and C++"}]